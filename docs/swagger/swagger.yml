components:
  schemas:
    CloudDirectory:
      description: Represents a directory, sent by the server
      properties:
        directoryContent:
          description: Content of the directory (if returns CloudDirectory, the directoryContent
            array is empty)
          items:
            oneOf:
            - $ref: '#/components/schemas/CloudFile'
            - $ref: '#/components/schemas/CloudDirectory'
          type: array
        id:
          description: Directory ID
          example: 9b81d950-b605-471f-a654-4fffba6bcfc5
          format: uuid
          type: string
        mimetype:
          description: application/x-dir for a directory
          enum:
          - application/x-dir
          example: application/x-dir
          type: string
        name:
          description: Directory name
          example: MyDir
          type: string
        ownerName:
          description: Owner ID
          example: John Doe
          format: uuid
          type: string
        path:
          description: Tree structure to access this folder, excluding the folder
            itself.
          items:
            $ref: '#/components/schemas/Path'
          type: array
        tags:
          description: File tag
          items:
            $ref: '#/components/schemas/FileTag'
          type: array
      required:
      - id
      - owner
      - name
      - mimetype
      - path
      - directoryContent
      - tags
      type: object
    CloudFile:
      description: Represents a classic file, sent by the server
      properties:
        created_at:
          description: File creation date
          example: '2017-07-21T15:32:28Z'
          format: date-time
          type: string
        id:
          description: File ID
          example: 9b81d950-b605-471f-a654-4fffba6bcfc5
          format: uuid
          type: string
        mimetype:
          description: File type
          example: application/pdf
          type: string
        name:
          description: File name
          example: File.pdf
          type: string
        ownerName:
          description: Owner ID
          example: John DOE
          format: uuid
          type: string
        shareMode:
          description: Sharing mode
          enum:
          - readonly
          - readwrite
          example: readonly
          type: string
        shareType:
          description: Sharing type
          enum:
          - readonly
          - readwrite
          type: string
        size:
          description: File size
          example: 666
          type: integer
        tags:
          description: File tag
          items:
            $ref: '#/components/schemas/FileTag'
          type: array
        updated_at:
          description: File last modification date
          example: '2017-07-21T17:32:28Z'
          format: date-time
          type: string
      required:
      - id
      - ownerName
      - name
      - mimetype
      - shareWith
      - size
      - updated_at
      - created_at
      - tags
      - shareMode
      type: object
    Devices:
      description: Device used by user to access to the service
      properties:
        OS:
          example: Device's operating system
          type: string
        browser:
          example: Device's browser
          type: string
        name:
          example: Device's name
          type: string
      required:
      - name
      type: object
    FileCopyBody:
      properties:
        copyFileName:
          description: Copy name
          example: FileName.pdf
          type: string
        destID:
          description: ID of the destination directory
          example: 9b81d950-b605-471f-a654-4fffba6bcfc5
          format: uuid
          type: string
      required:
      - destID
      type: object
    FileShareAccess:
      description: User who have a share access to a file
      properties:
        email:
          example: john.doe@gmail.com
          format: email
          type: string
        name:
          example: John DOE
          type: string
      required:
      - email
      - name
      type: object
    FileTag:
      description: File tag
      properties:
        hexColor:
          example: '#eeeeee'
          pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
          type: string
        id:
          example: 65af88e0-4d6f-80da-1cab-6ef5db2c719a
          format: uuid
          type: string
        name:
          example: TODO
          type: string
      required:
      - id
      - name
      - hexColor
      type: object
    GenericErrorResponse:
      description: Generic error response
      properties:
        msg:
          description: msg
          example: <error message>
          type: string
        success:
          description: true if the operation succeeded, otherwise false
          example: false
          type: boolean
      required:
      - success
      - msg
      type: object
    GenericSuccessResponse:
      description: Generic error response
      properties:
        msg:
          description: msg
          example: Success
          type: string
        success:
          description: true if the operation succeeded, otherwise false
          example: false
          type: boolean
      required:
      - success
      - msg
      type: object
    Path:
      properties:
        id:
          description: Directory ID
          example: 9b81d950-b605-471f-a654-4fffba6bcfc5
          format: uuid
          type: string
        name:
          description: Directory name
          example: SubDir
          type: string
      required:
      - id
      - name
      type: object
    SearchBody:
      properties:
        endLastModifiedDate:
          description: Select only files which last modification date is before this
            value
          format: date
          type: string
        mimetypes:
          description: Select only files which its mimetype is in this list
          items:
            example: application/pdf
            type: string
          type: array
        name:
          example: Doc*
          type: string
        startLastModifiedDate:
          description: Select only files which last modification date is after this
            value
          format: date
          type: string
        tagIDs:
          description: Select only files which contains a tag which specified in this
            list
          items:
            example: 9b81d950-b605-471f-a654-4fffba6bcfc5
            format: uuid
            type: string
          type: array
      type: object
    User:
      description: User
      properties:
        _id:
          example: 65af88e0-4d6f-80da-1cab-6ef5db2c719a
          format: uuid
          type: string
        created_at:
          example: '2020-09-21T11:31:20.714Z'
          format: date-time
          type: string
        directory_id:
          description: ID of the root directory of the user
          example: 65af88e0-4d6f-80da-1cab-6ef5db2c719a
          format: uuid
          type: string
        email:
          example: john.doe@gmail.com
          format: email
          type: string
        firstname:
          example: John
          type: string
        lastname:
          example: DOE
          type: string
        role:
          enum:
          - owner
          - collaborater
          example: owner
          type: string
        tags:
          items:
            $ref: '#/components/schemas/FileTag'
          type: array
        updated_at:
          example: '2020-09-22T11:31:20.714Z'
          format: date-time
          type: string
      required:
      - _id
      - directory_id
      - firstname
      - lastname
      - email
      - role
      - updated_at
      - created_at
      - tags
      type: object
  securitySchemes:
    jwtToken:
      in: cookie
      name: access_token
      type: apiKey
info:
  description: "- The application defines three rights for each node :\n  - `read`\n\
    \  - `write`\n  - `owner`\n"
  title: CyberDoc API
  version: 1.0.0
openapi: 3.0.0
paths:
  /auth/forgottenPassword:
    post:
      description: Ask the backend to send an email to the user with a token which
        will be usable to change user's password
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  example: email@gmail.com
                  format: email
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success / Unknown user
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Email is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      summary: Forgotten password
      tags:
      - Authentication
  /auth/passwordcheck:
    post:
      description: Check if user enters valid password
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  example: Hello123456789@
                  type: string
              required:
              - password
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  msg:
                    example: Valid credentials
                    type: string
                  success:
                    example: true
                    type: boolean
                required:
                - success
                - msg
                type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required)
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Bad login/password
        '500':
          description: Internal Error
      summary: Check if user enters valid password
      tags:
      - Check password
  /auth/signin:
    post:
      description: Login a user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  example: john.doe@gmail.com
                  format: email
                  type: string
                password:
                  example: Hello123456789@
                  type: string
              required:
              - email
              - password
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  msg:
                    example: Authentication token generated
                    type: string
                  success:
                    example: true
                    type: boolean
                  token:
                    example: <jwt token>
                    type: string
                required:
                - success
                - msg
                - token
                type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required)
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Bad login/password
        '500':
          description: Internal Error
      summary: Login a user
      tags:
      - Authentication
  /auth/signup:
    post:
      description: Register user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  example: john.doe@gmail.com
                  format: email
                  type: string
                firstname:
                  example: John
                  type: string
                lastname:
                  example: DOE
                  type: string
                password:
                  example: Hello123456789@
                  type: string
                role:
                  enum:
                  - owner
                  - collaborater
                  example: owner
                  type: string
              required:
              - firstname
              - lastname
              - email
              - password
              - role
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  msg:
                    example: Success
                    type: string
                  success:
                    example: true
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
                required:
                - success
                - msg
                - user
                type: object
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required)
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Another user with the same email already exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      summary: Register user
      tags:
      - Authentication
  /files:
    post:
      description: Upload a new file / create a new directory
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                folderID:
                  description: ID of the folder which will contains the new file
                  example: <folder UUID>
                  type: string
                mimetype:
                  description: File mimetype, `application/x-dir` to create a directory
                  example: application/pdf
                  type: string
                name:
                  description: File name
                  example: File.pdf
                  type: string
                upfile:
                  description: File to upload, `null` to create a directory
                  format: binary
                  type: string
              required:
              - name
              - mimetype
              - folderID
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  file:
                    oneOf:
                    - $ref: '#/components/schemas/CloudFile'
                    - $ref: '#/components/schemas/CloudDirectory'
                  msg:
                    description: msg
                    example: Success
                    type: string
                  success:
                    description: true if the operation succeeded, otherwise false
                    example: true
                    type: boolean
                required:
                - success
                - msg
                - file
                type: object
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '- `name` field is invalid

            - `mimetype` field is invalid

            - if `mimetype != application/x-dir` AND `upfile == null`

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `folderID` is not a valid directory\n- The current user\
            \ don't have `owner` access on `folderID` \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Upload a new file / create a new directory
      tags:
      - Files
  /files/search:
    post:
      description: Search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  msg:
                    description: msg
                    example: Success
                    type: string
                  results:
                    items:
                      oneOf:
                      - $ref: '#/components/schemas/CloudFile'
                      - $ref: '#/components/schemas/CloudDirectory'
                    type: array
                  success:
                    description: true if the operation succeeded, otherwise false
                    example: true
                    type: boolean
                required:
                - success
                - msg
                - results
                type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Bad request (missing, `null` or invalid fields)
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Search
      tags:
      - Files
  /files/shared:
    get:
      description: Get files shared with current user
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  msg:
                    description: msg
                    example: Success
                    type: string
                  results:
                    items:
                      $ref: '#/components/schemas/CloudFile'
                    type: array
                  success:
                    description: true if the operation succeeded, otherwise false
                    example: true
                    type: boolean
                required:
                - success
                - msg
                - results
                type: object
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Get files shared with current user
      tags:
      - File sharing
  /files/{fileId}:
    delete:
      description: Delete a file/directory
      parameters:
      - description: ID of file to delete
        in: path
        name: fileId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid node\n- The current user don't have\
            \ `owner` access on this node \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Delete a file/directory
      tags:
      - Files
    get:
      description: Get file/directory by ID
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  content:
                    oneOf:
                    - $ref: '#/components/schemas/CloudFile'
                    - $ref: '#/components/schemas/CloudDirectory'
                  msg:
                    description: msg
                    example: Success
                    type: string
                  success:
                    description: true if the operation succeeded, otherwise false
                    example: true
                    type: boolean
                required:
                - success
                - msg
                - content
                type: object
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid node\n- The current user don't have\
            \ `read` access on this node \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Get file/directory by ID
      tags:
      - Files
    patch:
      description: Edit file/directory metadata
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                directoryID:
                  description: ID of the directory which contains the file
                  example: 9b81d950-b605-471f-a654-4fffba6bcfc5
                  format: uuid
                  type: string
                name:
                  description: File name
                  example: FileName.pdf
                  type: string
                preview:
                  description: If preview for this file is allowed or not
                  type: boolean
                shareMode:
                  description: Sharing mode
                  enum:
                  - readonly
                  - readwrite
                  example: readonly
                  type: string
              required:
              - name
              - directoryID
        description: File
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid node\n- The current user don't have\
            \ `owner` access on this node \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Edit file/directory metadata
      tags:
      - Files
    put:
      description: Upload new version of an existing file
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                upfile:
                  description: File to upload
                  format: binary
                  type: string
              required:
              - upfile
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '- `fileId` is a directory

            - `upfile == null`

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `write` access on this file \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Upload new version of an existing file
      tags:
      - Files
  /files/{fileId}/copy:
    post:
      description: Copy a file or a directory
      parameters:
      - description: ID of file to copy
        in: path
        name: fileId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileCopyBody'
        description: File
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  file:
                    $ref: '#/components/schemas/CloudFile'
                  msg:
                    description: msg
                    example: Success
                    type: string
                  success:
                    description: true if the operation succeeded, otherwise false
                    example: true
                    type: boolean
                required:
                - success
                - msg
                - file
                type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '- `fileId` is a directory

            - `copyFileName` field is invalid

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `read` access on this file \n- The current user don't have `owner` access\
            \ on `destID` \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Copy a file
      tags:
      - Files
  /files/{fileId}/download:
    get:
      description: Download file
      parameters:
      - description: ID of file
        in: path
        name: fileId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Success (dynamic mimetype)
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '`fileId` is a directory

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `read` access on this file \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Download file
      tags:
      - Files
  /files/{fileId}/export:
    get:
      description: Export file in PDF format
      parameters:
      - description: ID of file
        in: path
        name: fileId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/pdf:
              schema:
                format: binary
                type: string
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '- PDF export for `fileId` is not available

            - `fileId` is a directory

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `read` access on this file \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Export file in PDF format
      tags:
      - Files
  /files/{fileId}/preview:
    get:
      description: Get file preview
      parameters:
      - description: ID of file
        in: path
        name: fileId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '- Preview for `fileId` is disabled

            - Preview for `fileId` is not available

            - `fileId` is a directory

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `read` access on this file \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Get file preview
      tags:
      - Files
  /files/{fileId}/sharing:
    get:
      description: Get all users who have share access to a file
      parameters:
      - description: ID of file
        in: path
        name: fileId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  msg:
                    description: msg
                    example: Success
                    type: string
                  success:
                    description: true if the operation succeeded, otherwise false
                    example: true
                    type: boolean
                  users:
                    items:
                      $ref: '#/components/schemas/FileShareAccess'
                    type: array
                required:
                - success
                - msg
                - users
                type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '`fileId` is a directory

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `read` access on this file \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Get all users who have share access to a file
      tags:
      - File sharing
    post:
      description: Add share access of a file with a user
      parameters:
      - description: ID of file
        in: path
        name: fileId
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                email:
                  format: email
                  type: string
              required:
              - email
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Bad request - fileId is a directory or current user is the
            owner of the fileId
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `owner` access on this file \n- The application don't have a user with\
            \ the specified `email`\n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Add share access of a file with a user
      tags:
      - File sharing
  /files/{fileId}/sharing/{email}:
    delete:
      description: Remove share access of a file with a user
      parameters:
      - description: ID of file
        in: path
        name: fileId
        required: true
        schema:
          type: string
      - description: User email
        in: path
        name: email
        required: true
        schema:
          format: email
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Bad request - fileId is a directory or specified email doesn't
            have sharing access to the file
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `owner` access on this file \n- The application don't have a user with\
            \ the specified `email`\n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Remove share access of a file with a user
      tags:
      - File sharing
  /files/{fileId}/tags:
    post:
      description: Add a tag
      parameters:
      - description: file ID
        in: path
        name: fileId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tagid:
                  type: string
              required:
              - tagid
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid node\n- The current user don't have\
            \ `owner` access on this node \n- `tagId` is not a valid tag\n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Add a tag
      tags:
      - File tags
  /files/{fileId}/tags/{tagId}:
    delete:
      description: Remove a file tag
      parameters:
      - description: file ID
        in: path
        name: fileId
        required: true
        schema:
          format: uuid
          type: string
      - description: Tag ID
        in: path
        name: tagId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: '`fileId` don''t have `tagId` on it

            '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: "- `fileId` is not a valid file\n- The current user don't have\
            \ `owner` access on this file \n"
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Remove a file tag
      tags:
      - File tags
  /users/devices:
    get:
      description: Get devices
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  devices:
                    items:
                      $ref: '#/components/schemas/Devices'
                  msg:
                    example: Success
                    type: string
                  success:
                    example: true
                    type: boolean
                required:
                - success
                - msg
                - devices
                type: object
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Get devices
      tags:
      - User's devices
    post:
      description: Create a device
      requestBody:
        content:
          application/json:
            schema:
              example:
                OS: Microsoft Windows 10
                browser: Firefox
                name: Office computer
              properties:
                OS:
                  type: string
                browser:
                  type: string
                name:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required) or name already used
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Create a device
      tags:
      - User's devices
  /users/devices/{name}:
    delete:
      description: Delete a device
      parameters:
      - description: Device's name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Device not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Delete a device
      tags:
      - User's devices
    patch:
      description: Modify a device
      parameters:
      - description: Device's name
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              required:
              - name
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required) or name already used
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Tag not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Modify a device
      tags:
      - User's devices
  /users/profile:
    delete:
      description: Delete active user account
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Delete active user account
      tags:
      - Users
    get:
      description: Get current user
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  msg:
                    example: Success
                    type: string
                  success:
                    example: true
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
                required:
                - success
                - msg
                - user
                type: object
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Get current user
      tags:
      - Users
    post:
      description: Set current user properties and reset password (forgotten password)
      requestBody:
        content:
          application/json:
            schema:
              example:
                email: email@gmail.com
                firstname: John
                lastname: DOE
                password: MyPassword
              properties:
                email:
                  format: email
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                password:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required)
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      - resetPasswordToken: []
      summary: Set current user properties and reset password (forgotten password)
      tags:
      - Users
  /users/exportData:
    get:
      description: Get user's files data
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  filesData:
                    items:
                      $ref: '#/components/schemas/CloudFile'
                  msg:
                    example: Success
                    type: string
                  success:
                    example: true
                    type: boolean
                required:
                  - success
                  - msg
                  - filesData
                type: object
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
        - jwtToken: []
      summary: Export user's files data
      tags:
        - User's file data
  /users/tags:
    post:
      description: Create a tag
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  example: '#eeeeee'
                  type: string
                name:
                  example: TODO
                  type: string
              required:
              - name
              - color
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required), or another tag with
            the same name already exists
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Create a tag
      tags:
      - File tags
  /users/tags/{tagId}:
    delete:
      description: Delete a tag
      parameters:
      - description: Tag ID to delete
        in: path
        name: tagId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Tag not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Delete a tag
      tags:
      - File tags
    patch:
      description: Modify a tag
      parameters:
      - description: Tag ID to edit
        in: path
        name: tagId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  example: '#eeeeee'
                  type: string
                name:
                  example: TODO
                  type: string
              required:
              - name
              - color
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Body is invalid (all values are required), or another tag with
            the same name already exists
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Not logged in
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Tag not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
          description: Server error
      security:
      - jwtToken: []
      summary: Modify a tag
      tags:
      - File tags
servers:
- description: Local server
  url: http://localhost:3000/v1
- description: Prod server
  url: http://api.cyberdoc.fulgen.fr/v1
