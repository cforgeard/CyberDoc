openapi: 3.0.0
info:
  title: CyberDoc Auth & Users API
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1
    description: Local server
  - url: http://api.cyberdoc.fulgen.fr/v1
    description: Prod server  
paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register user
      description: Register user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - email
                - password
                - role
              properties:
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: DOE
                email:
                  type: string
                  format: email
                  example: john.doe@gmail.com
                password:
                  type: string
                  example: Hello123456789@
                role:
                  type: string
                  enum: [owner, collaborater]
                  example: owner
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - msg
                  - user
                properties:
                  success:
                    type: boolean
                    example: true
                  msg:
                    type: string
                    example: "Success"
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Body is invalid (all values are required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "409":
          description: Another user with the same email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Login a user
      description: Login a user
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@gmail.com
                password:
                  type: string
                  example: Hello123456789@
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - msg
                  - token
                properties:
                  success:
                    type: boolean
                    example: true
                  msg:
                    type: string
                    example: "Authentication token generated"
                  token:
                    type: string
                    example: <jwt token>
        "400":
          description: Body is invalid (all values are required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "403":
          description: Bad login/password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Internal Error

  /users/profile:
    get:
      security:
        - jwtToken: []  
      tags:
        - Users
      summary: Get current user
      description: Get current user
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - msg
                  - user
                properties:
                  success:
                    type: boolean
                    example: true
                  msg:
                    type: string
                    example: "Success"
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
                
    post:
      tags:
        - Users
      security:
        - jwtToken: []
        - resetPasswordToken: []
      summary: Set current user properties and reset password (forgotten password)
      description: Set current user properties and reset password (forgotten password)
      requestBody:
        content:
          application/json:
            schema:
              example: 
                firstname: "John"
                lastname: "DOE"
                email: "email@gmail.com"
                password: "MyPassword"
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Body is invalid (all values are required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

          
    delete:
      tags:
        - Users
      security:
        - jwtToken: []  
      summary: Delete active user account
      description: Delete active user account
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"


  "/users/tags":
    post: 
      tags:
        - File tags
      security:
        - jwtToken: []  
      summary: Create a tag
      description: Create a tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  example: TODO
                  type: string
                color:
                  example: "#eeeeee"
                  type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Body is invalid (all values are required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

  "/users/tags/{tagId}":
    patch: 
      tags:
        - File tags
      security:
        - jwtToken: []  
      summary: Modify a tag
      description: Modify a tag
      parameters:
        - name: tagId
          in: path
          description: Tag ID to edit
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  example: TODO
                  type: string
                color:
                  example: "#eeeeee"
                  type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Body is invalid (all values are required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
    delete:
      tags:
        - File tags
      security:
        - jwtToken: []  
      summary: Delete a tag
      description: Delete a tag
      parameters:
        - name: tagId
          in: path
          description: Tag ID to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

  /auth/forgottenPassword:               
    post:
      tags:
        - Authentication
      summary: Forgotten password
      description: Ask the backend to send an email to the user with a token which will be usable to change user's password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "email@gmail.com"
      responses:
        "200":
          description: Success / Unknown user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Email is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

  /users/devices:
    get:
      security:
        - jwtToken: []  
      tags:
        - User's devices
      summary: Get devices
      description: Get devices
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - msg
                  - devices
                properties:
                  success:
                    type: boolean
                    example: true
                  msg:
                    type: string
                    example: "Success"
                  devices:
                    $ref: "#/components/schemas/Devices"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
                
    post:
      tags:
        - User's devices
      security:
        - jwtToken: []
      summary: Create a device
      description: Create a device
      requestBody:
        content:
          application/json:
            schema:
              example: 
                name: "Office computer"
                browser: "Firefox"
                OS: "Microsoft Windows 10"
              type: object
              properties:
                name:
                  type: string
                browser:
                  type: string
                OS:
                  type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Body is invalid (all values are required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

  /users/devices/{name}:
    patch: 
      tags:
        - User's devices
      security:
        - jwtToken: []  
      summary: Modify a device
      description: Modify a device
      parameters:
        - name: name
          in: path
          description: Device's name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - browser
                - OS
              properties:
                name:
                  type: string
                browser:
                  type: string
                OS:
                  type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Body is invalid (all values are required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

    delete:
      tags:
        - User's devices
      security:
        - jwtToken: []  
      summary: Delete a device
      description: Delete a device
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "401":
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"


components:
  securitySchemes:
    jwtToken:
      type: apiKey
      in: cookie
      name: access_token
    resetPasswordToken:
      type: http
      scheme: bearer

  schemas:
    FileTag:
      description: File tag
      type: object
      required:
        - id
        - name
        - hexColor
      properties:
        id:
          type: string
          format: uuid
          example: 65af88e0-4d6f-80da-1cab-6ef5db2c719a
        name:
          type: string
          example: TODO
        hexColor:
          type: string
          pattern: "^#(?:[0-9a-fA-F]{3}){1,2}$"
          example: "#eeeeee"

    User:
      description: User
      type: object
      required:
        - _id
        - directory_id
        - firstname
        - lastname
        - email
        - role
        - updated_at
        - created_at
        - tags
      properties:
        _id:
          type: string
          format: uuid
          example: 65af88e0-4d6f-80da-1cab-6ef5db2c719a
        directory_id:
          description: ID of the root directory of the user
          type: string
          format: uuid
          example: 65af88e0-4d6f-80da-1cab-6ef5db2c719a
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: DOE
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        role:
          type: string
          enum: [owner, collaborater]
          example: owner
        updated_at:
          type: string
          format: date-time
          example: "2020-09-22T11:31:20.714Z"
        created_at:
          type: string
          format: date-time
          example: "2020-09-21T11:31:20.714Z"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/FileTag"

    Devices:
      description: Device used by user to access to the service
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Device name

    GenericSuccessResponse:
      description: Generic error response
      type: object
      required:
        - success
        - msg
      properties:
        success:
          type: boolean
          description: true if the operation succeeded, otherwise false
          example: false
        msg:
          type: string
          description: msg
          example: Success
          
    GenericErrorResponse:
      description: Generic error response
      type: object
      required:
        - success
        - msg
      properties:
        success:
          type: boolean
          description: true if the operation succeeded, otherwise false
          example: false
        msg:
          type: string
          description: msg
          example: <error message>
